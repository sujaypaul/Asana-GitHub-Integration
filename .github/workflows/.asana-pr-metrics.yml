name: Asana PR Metrics
on:
  pull_request:
    types: [opened, edited, labeled, unlabeled, review_requested, closed]
  schedule:
    - cron: '5 16 * * 2' # 0 0 * * 1
jobs:
  validate-asana-link:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action != 'closed' && github.event.action != 'review_requested'
    steps:
      - name: Check for Asana Task URL
        id: check-url
        run: |
          DESCRIPTION="${{ github.event.pull_request.body }}"
          if [[ "$DESCRIPTION" =~ "https://app.asana.com" ]] && ! [[ "${{ github.event.pull_request.labels.*.name }}" =~ "hotfix" ]]; then
            echo "Asana task URL found"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "No valid Asana task URL or hotfix label detected"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
      - name: Create PR Attachment on Asana Task
        if: steps.check-url.outputs.status == 'success'
        uses: Asana/create-app-attachment-github-action@latest
        with:
          asana-secret: ${{ secrets.ASANA_SECRET }}
      - name: Fail if No Asana Task URL
        if: steps.check-url.outputs.status == 'failure' && !contains(github.event.pull_request.labels.*.name, 'hotfix')
        run: |
          echo "Error: No valid Asana task URL found in PR description"
          exit 1

  weekly-unlinked-pr-report:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v3
      - name: Fetch PRs
        run: |
          curl -H "Authorization: Bearer ${{ github.token }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/pulls?state=open > prs.json
      - name: Check Unlinked PRs
        run: |
          UNLINKED_COUNT=0
          UNLINKED_PRS=""
          while IFS= read -r pr; do
            PR_NUMBER=$(echo "$pr" | jq -r '.number')
            DESCRIPTION=$(echo "$pr" | jq -r '.body // ""')
            LABELS=$(echo "$pr" | jq -r '.labels[].name')
            if ! echo "$DESCRIPTION" | grep -q "https://app.asana.com" && ! echo "$LABELS" | grep -q "hotfix"; then
              UNLINKED_COUNT=$((UNLINKED_COUNT + 1))
              UNLINKED_PRS="$UNLINKED_PRS\n- PR #$PR_NUMBER: $(echo "$pr" | jq -r '.title')"
            fi
          done < <(jq -c '.[]' prs.json)
          echo "Unlinked PRs: $UNLINKED_COUNT" > unlinked_report.txt
          echo -e "Unlinked PRs:\n$UNLINKED_PRS" >> unlinked_report.txt
      - name: Create GitHub Issue
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "Weekly Unlinked PR Report"
          content-filepath: unlinked_report.txt
          labels: report, unlinked-prs

  track-review-to-merge:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'review_requested' || github.event.action == 'closed')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Store Review Requested Time as PR Comment
        if: github.event.action == 'review_requested'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const reviewTime = new Date().toISOString();
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Review requested at: ${reviewTime} [Automated by Asana PR Metrics]`
            });
            core.setOutput('review_time', reviewTime);
      - name: Checkout Review Times (Placeholder)
        if: github.event.action == 'closed' && github.event.pull_request.merged
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Calculate Review-to-Merge Time
        if: github.event.action == 'closed' && github.event.pull_request.merged
        id: calculate-time
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            let reviewTime = null;
            console.log('Comments:', comments.map(c => c.body)); // Debug: Log all comments
            for (const comment of comments) {
              if (comment.body.includes('Review requested at:') && comment.body.includes('[Automated by Asana PR Metrics]')) {
                const match = comment.body.match(/Review requested at: (\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.*Z)/);
                if (match && match[1]) {
                  reviewTime = match[1];
                  break;
                }
              }
            }
            if (!reviewTime) {
              core.setFailed('No valid review requested time found in PR comments');
              return;
            }
            const mergeTime = new Date().toISOString();
            const reviewDate = new Date(reviewTime);
            const mergeDate = new Date(mergeTime);
            if (isNaN(reviewDate.getTime()) || isNaN(mergeDate.getTime())) {
              core.setFailed('Invalid date conversion for review or merge time');
              return;
            }
            const reviewEpoch = reviewDate.getTime() / 1000;
            const mergeEpoch = mergeDate.getTime() / 1000;
            const timeDiff = mergeEpoch - reviewEpoch;
            const hours = Math.floor(timeDiff / 3600);
            const minutes = Math.floor((timeDiff % 3600) / 60);
            core.setOutput('hours', hours);
            core.setOutput('minutes', minutes);
            core.setOutput('comment_text', `PR #${context.issue.number} merged. Review-to-merge time: ${hours}h ${minutes}m`);
      - name: Extract AI-Assisted Line Changes
        if: github.event.action == 'closed' && github.event.pull_request.merged
        run: |
          DESCRIPTION="${{ github.event.pull_request.body }}"
          if [[ "$DESCRIPTION" =~ \+([0-9]+)-([0-9]+) ]]; then
            ADDED_LINES="${BASH_REMATCH[1]}"
            REMOVED_LINES="${BASH_REMATCH[2]}"
            echo "AI-assisted lines: +${ADDED_LINES}-${REMOVED_LINES}" >> metrics.txt
            echo "ai_lines=+${ADDED_LINES}-${REMOVED_LINES}" >> $GITHUB_OUTPUT
          else
            echo "No AI-assisted line changes found" >> metrics.txt
            echo "ai_lines=none" >> $GITHUB_OUTPUT
          fi
        id: extract-ai-lines
      - name: Comment on Asana Task
        if: github.event.action == 'closed' && github.event.pull_request.merged
        uses: Asana/comment-on-task-github-action@v1.2
        with:
          asana-secret: ${{ secrets.ASANA_SECRET }}
          comment-text: "${{ steps.calculate-time.outputs.comment_text }}. AI-assisted lines: ${{ steps.extract-ai-lines.outputs.ai_lines }}"
      - name: Fetch Asana Custom Field GIDs
        if: github.event.action == 'closed' && github.event.pull_request.merged
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }} # Placeholder, not used for Asana
          script: |
            const description = context.payload.pull_request.body;
            const match = description.match(/https:\/\/app.asana.com\/[0-9]+\/(?:[0-9]+\/)?project\/[0-9]+\/task\/([0-9]+)/);
            const taskId = match ? match[1] : null;
            if (!taskId) {
              core.setFailed('No valid Asana task ID found in PR description');
              return;
            }
            const asana = require('asana');
            const client = asana.Client.create().useAccessToken(process.env.ASANA_SECRET);
            const task = await client.tasks.findById(taskId, { opt_fields: 'custom_fields.gid,custom_fields.name' });
            const fieldMap = {};
            for (const field of task.custom_fields) {
              if (field.name === 'Review-to-merge time') fieldMap['review_time'] = field.gid;
              if (field.name === 'AI-assisted lines') fieldMap['ai_lines'] = field.gid;
            }
            core.setOutput('review_time_gid', fieldMap['review_time'] || '');
            core.setOutput('ai_lines_gid', fieldMap['ai_lines'] || '');
          debug: false
          user-agent: actions/github-script
          result-encoding: json
          retries: 0
          retry-exempt-status-codes: 400,401,403,404,422
      - name: Extract Task ID
        if: github.event.action == 'closed' && github.event.pull_request.merged
        id: extract-task-id
        run: |
          DESCRIPTION="${{ github.event.pull_request.body }}"
          if [[ "$DESCRIPTION" =~ https://app.asana.com/0/([0-9]+)/ ]]; then
            TASK_ID="${BASH_REMATCH[1]}"
            echo "task-id=$TASK_ID" >> $GITHUB_OUTPUT
          else
            echo "task-id=" >> $GITHUB_OUTPUT
          fi
      - name: Update Asana Custom Fields
        if: github.event.action == 'closed' && github.event.pull_request.merged
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_ACCESS_TOKEN }} # Placeholder, not used for Asana
          script: |
            const taskId = "${{ steps.extract-task-id.outputs.task-id }}";
            if (!taskId) {
              core.setFailed('No valid Asana task ID found in PR description');
              return;
            }
            const asana = require('asana');
            const client = asana.Client.create().useAccessToken(process.env.ASANA_SECRET);
            const reviewTimeGid = "${{ steps.fetch-custom-fields.outputs.review_time_gid }}";
            const aiLinesGid = "${{ steps.fetch-custom-fields.outputs.ai_lines_gid }}";
            const customFields = {};
            if (reviewTimeGid) customFields[reviewTimeGid] = "${{ steps.calculate-time.outputs.hours }}h ${{ steps.calculate-time.outputs.minutes }}m";
            if (aiLinesGid) customFields[aiLinesGid] = "${{ steps.extract-ai-lines.outputs.ai_lines }}";
            await client.tasks.update(taskId, {
              custom_fields: customFields
            });
            core.setOutput('status', 'success');
